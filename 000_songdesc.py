import binascii
import json
import zlib
print("JUST DANCE SONGDESC ENCRYPTOR BY YUNYL")
codename_input = input("Capital Codename: ")
game_input = input("GameVersion: ")
songtitle_input = input("Song Title: ")
songartist_input = input("Song Artist: ")
coachcount_input = input("CoachNumber: ")
previewenter_input = input("PreviewEntry: ")
previewend_input = input("PreviewEnd: ")
color = input("LyricsColor without the hex: ")

b_ = b''
i = 0

codename_wii = (("WII_" + codename_input))
codename_wii_songdesc = codename_wii + "_songdesc.tpl.ckd"

OUTPUT = codename_wii_songdesc
ENCODING = 'utf-8'

# useless stuff
start_songdesc = binascii.unhexlify(str.encode("000000010000031C1B857BCE0000006C00000000000000000000000000000000000000000000000000000000000000018AC2B5C6000000F4"))

# codename encode and length
codename_length = len(codename_input).to_bytes(4, 'big')
codename_encode = codename_input.encode()

# game year
gameyear = game_input.encode()

# before artist
before_artist = binascii.unhexlify(str.encode("000000000000000100000058000000000000000000000007FFFFFFFF0000000300000000000000000000000000000000FFFFFFFF0000000000000001"))

# song artist
songartist_length = len(songartist_input).to_bytes(4, 'big')
songartist_encode = songartist_input.encode()

# unknown dancer
unknowndancer = binascii.unhexlify(str.encode("0000000E556E6B6E6F776E2044616E636572"))

# song title
songtitle_length = len(songartist_input).to_bytes(4, 'big')
songtitle_encode = songtitle_input.encode()

# coachcount
coachcount_encode = coachcount_input.encode()

# after coachcount
after_coachcount = binascii.unhexlify(str.encode("FFFFFFFF000000020000000000000000000000013F00000000000002000000106F4037D0"))

# preview encodes
previewenter_encode = previewenter_input.encode()

# after preview ender
after_previewenter = binascii.unhexlify(str.encode("0000000000000010B11FC1B6"))

# preview end encode
previewend_encode = previewend_input.encode()
previewend_encode = previewend_input.encode()

# after previewend
after_previewend = binascii.unhexlify(str.encode("000000A60000000624A808D7000000003F5ADADC3F8000003F80000031D3B347"))

# color
rgb = tuple(int(color[i:i+2], 16) for i in (0, 2 ,4))
normal = tuple(i / 255 for i in rgb)
normal_to_hex = struct.pack('>f', normal).hex() 



# ending
useless_ending = binascii.unhexlify(str.encode

everything_together = start_songdesc + codename_length + codename_encode + gameyear + gameyear + before_artist + songartist_length + songartist_encode + unknowndancer + songtitle_length + songtitle_encode + coachcount_encode + after_coachcount + previewenter_encode + after_previewenter + previewend_encode + after_previewend + useless_ending

print(everything_together)

i = i + 1
with open(codename_wii_songdesc, "ab") as g:
    g.write(everything_together)
    g.close()
